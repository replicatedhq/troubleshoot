{
  "kind": "ConfigMapList",
  "apiVersion": "v1",
  "metadata": {
    "resourceVersion": "8769"
  },
  "items": [
    {
      "kind": "ConfigMap",
      "apiVersion": "v1",
      "metadata": {
        "name": "kube-root-ca.crt",
        "namespace": "default",
        "uid": "977a2867-5b73-45cf-bc60-b9804935448d",
        "resourceVersion": "332",
        "creationTimestamp": "2025-08-09T22:55:12Z",
        "annotations": {
          "kubernetes.io/description": "Contains a CA bundle that can be used to verify the kube-apiserver when using internal endpoints such as the internal service IP or kubernetes.default.svc. No other usage is guaranteed across distributions of Kubernetes clusters."
        },
        "managedFields": [
          {
            "manager": "kube-controller-manager",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-08-09T22:55:12Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:data": {
                ".": {},
                "f:ca.crt": {}
              },
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:kubernetes.io/description": {}
                }
              }
            }
          }
        ]
      },
      "data": {
        "ca.crt": "-----BEGIN CERTIFICATE-----\nMIIDBTCCAe2gAwIBAgIIGyXN8PNVaAUwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczAeFw0yNTA4MDkyMjQ5NTZaFw0zNTA4MDcyMjU0NTZaMBUx\nEzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQDNhANYb/mcWwGDeVV4oMJPqMWac/Yr3ff01uH+8ftX1W2fU0GCizo+s+Zz\nlDxYkiAYcyfbqOqNogCanA39QXBblYZ2rKbDVdvby3wjUVyc7yA5C3eU/IgfvAJw\n764XUV6GuGudOYn8awa4Veco0rZ/Xw1wV+WwyW5LcAj1j29qDuYEL1y8TClGYw1q\nUcBowMI57MBTW/l0GhC+EMHkwYXlIkK8QxPZI6w4afDdyH5iEwnJ0ayQg7sRcjSd\nLQP7T6JGUz3BN3Shdpvxm0BsaxrtWvdALcreI7JPw5AJdnhVhWI4ChOcf7L7bC9P\n7PUVyAZkwbk+iVFykYmL1r/Y9U/rAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP\nBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTcBkwBisroJtumoMoz2SNgHK6XnzAV\nBgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQCWk8q06TSq\nFA5TxNMkqrMYBroxLCnBdmundpFDRxdaIm4yqNrCmWHgt2DX+ilb+er94pCRpiD1\nDYHWABcj48FAJZW+zBqhCu5mgweK8fzpYWQtkPl7IacMvXC1lp+ypxuImVjlUTeY\nYAZ3HzpWxIa/unFWOBHryskKVfN9rIeBP/zVnrpMwI0/StzhSVErOj+8xYOkzrXu\nB3aQN6JMAOQiSt/zi3f6yQdWpQ+x8X/W1jh/S+HJ3obayKcw/giRwlsWRzxEnjwB\n/Anc8dXHEln6Uc19X5+YGcWzUlYRcWV17XlemQOqNJIc7TUfkxRBTDq2JUN5IrKf\nLTDSIn3zZoRB\n-----END CERTIFICATE-----\n"
      }
    },
    {
      "kind": "ConfigMap",
      "apiVersion": "v1",
      "metadata": {
        "name": "redis-configuration",
        "namespace": "default",
        "uid": "d139e0de-1f2c-4400-883e-44906adb61fb",
        "resourceVersion": "622",
        "creationTimestamp": "2025-08-09T22:55:57Z",
        "labels": {
          "app.kubernetes.io/instance": "redis",
          "app.kubernetes.io/managed-by": "Helm",
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/version": "8.2.0",
          "helm.sh/chart": "redis-22.0.1"
        },
        "annotations": {
          "meta.helm.sh/release-name": "redis",
          "meta.helm.sh/release-namespace": "default"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-08-09T22:55:57Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:data": {
                ".": {},
                "f:master.conf": {},
                "f:redis.conf": {},
                "f:replica.conf": {},
                "f:users.acl": {}
              },
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/instance": {},
                  "f:app.kubernetes.io/managed-by": {},
                  "f:app.kubernetes.io/name": {},
                  "f:app.kubernetes.io/version": {},
                  "f:helm.sh/chart": {}
                }
              }
            }
          }
        ]
      },
      "data": {
        "master.conf": "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
        "redis.conf": "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
        "replica.conf": "dir /data\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration",
        "users.acl": ""
      }
    },
    {
      "kind": "ConfigMap",
      "apiVersion": "v1",
      "metadata": {
        "name": "redis-health",
        "namespace": "default",
        "uid": "aa016e55-3d05-485c-a6a3-9d50557cb29a",
        "resourceVersion": "623",
        "creationTimestamp": "2025-08-09T22:55:57Z",
        "labels": {
          "app.kubernetes.io/instance": "redis",
          "app.kubernetes.io/managed-by": "Helm",
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/version": "8.2.0",
          "helm.sh/chart": "redis-22.0.1"
        },
        "annotations": {
          "meta.helm.sh/release-name": "redis",
          "meta.helm.sh/release-namespace": "default"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-08-09T22:55:57Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:data": {
                ".": {},
                "f:ping_liveness_local.sh": {},
                "f:ping_liveness_local_and_master.sh": {},
                "f:ping_liveness_master.sh": {},
                "f:ping_readiness_local.sh": {},
                "f:ping_readiness_local_and_master.sh": {},
                "f:ping_readiness_master.sh": {}
              },
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/instance": {},
                  "f:app.kubernetes.io/managed-by": {},
                  "f:app.kubernetes.io/name": {},
                  "f:app.kubernetes.io/version": {},
                  "f:helm.sh/chart": {}
                }
              }
            }
          }
        ]
      },
      "data": {
        "ping_liveness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] \u0026\u0026 export REDIS_PASSWORD=***HIDDEN***; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$responseFirstWord\" != \"LOADING\" ] \u0026\u0026 [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
        "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
        "ping_liveness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \u0026\u0026 export REDIS_MASTER_PASSWORD=***HIDDEN***; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
        "ping_readiness_local.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] \u0026\u0026 export REDIS_PASSWORD=***HIDDEN***; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
        "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
        "ping_readiness_master.sh": "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] \u0026\u0026 export REDIS_MASTER_PASSWORD=***HIDDEN***; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"
      }
    },
    {
      "kind": "ConfigMap",
      "apiVersion": "v1",
      "metadata": {
        "name": "redis-scripts",
        "namespace": "default",
        "uid": "8068c2ee-dd33-44f7-96c3-9135f848b84e",
        "resourceVersion": "624",
        "creationTimestamp": "2025-08-09T22:55:57Z",
        "labels": {
          "app.kubernetes.io/instance": "redis",
          "app.kubernetes.io/managed-by": "Helm",
          "app.kubernetes.io/name": "redis",
          "app.kubernetes.io/version": "8.2.0",
          "helm.sh/chart": "redis-22.0.1"
        },
        "annotations": {
          "meta.helm.sh/release-name": "redis",
          "meta.helm.sh/release-namespace": "default"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-08-09T22:55:57Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:data": {
                ".": {},
                "f:start-master.sh": {},
                "f:start-replica.sh": {}
              },
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/instance": {},
                  "f:app.kubernetes.io/managed-by": {},
                  "f:app.kubernetes.io/name": {},
                  "f:app.kubernetes.io/version": {},
                  "f:helm.sh/chart": {}
                }
              }
            }
          }
        ]
      },
      "data": {
        "start-master.sh": "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] \u0026\u0026 export REDIS_PASSWORD=***HIDDEN***;then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/users.acl ]];then\n    cp /opt/bitnami/redis/mounted-etc/users.acl /opt/bitnami/redis/etc/users.acl\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n",
        "start-replica.sh": "#!/bin/bash\n\nget_port() {\n    hostname=\"$1\"\n    type=\"$2\"\n\n    port_var=$(echo \"${hostname^^}_SERVICE_PORT_$type\" | sed \"s/-/_/g\")\n    port=${!port_var}\n\n    if [ -z \"$port\" ]; then\n        case $type in\n            \"SENTINEL\")\n                echo 26379\n                ;;\n            \"REDIS\")\n                echo 6379\n                ;;\n        esac\n    else\n        echo $port\n    fi\n}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    full_hostname=\"${hostname}.${HEADLESS_SERVICE}\"\n    echo \"${full_hostname}\"\n}\n\nREDISPORT=$(get_port \"$HOSTNAME\" \"REDIS\")\nHEADLESS_SERVICE=\"redis-headless.default.svc.cluster.local\"\n\n[[ -f $REDIS_PASSWORD_FILE ]] \u0026\u0026 export REDIS_PASSWORD=***HIDDEN***;then\n    cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nif [[ -f /opt/bitnami/redis/mounted-etc/users.acl ]];then\n    cp /opt/bitnami/redis/mounted-etc/users.acl /opt/bitnami/redis/etc/users.acl\nfi\n\necho \"\" \u003e\u003e /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-port $REDISPORT\" \u003e\u003e /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-ip $(get_full_hostname \"$HOSTNAME\")\" \u003e\u003e /opt/bitnami/redis/etc/replica.conf\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--replicaof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--protected-mode\" \"no\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\nexec redis-server \"${ARGS[@]}\"\n"
      }
    }
  ]
}
