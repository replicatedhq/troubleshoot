apiVersion: troubleshoot.sh/v1beta3
kind: Preflight
metadata:
  name: templated-requirements-example
requirements:
  - name: Baseline Control Plane
    docString: |
      Title: Kubernetes Control Plane Requirements
      Requirement:
        - Version:
          - Minimum: {{ .kubernetes.minVersion | default "v1.22.0" }}
          - Supported: v1.22.x – v1.29.x (stable releases only)
        - APIs required (must be enabled, GA):
          - admissionregistration.k8s.io/v1
          - apiextensions.k8s.io/v1
          - apps/v1
          - batch/v1
          - networking.k8s.io/v1
          - policy/v1
          - rbac.authorization.k8s.io/v1
          - storage.k8s.io/v1
    checks:
      - clusterVersion:
          checkName: Kubernetes version
          outcomes:
            - fail:
                when: '< {{ .kubernetes.minVersion | default "1.22.0" }}'
                message: Requires Kubernetes >= {{ .kubernetes.minVersion | default "1.22.0" }}
            - pass:
                when: '>= {{ .kubernetes.minVersion | default "1.22.0" }}'
                message: Kubernetes version is supported

  - name: Container Runtime
    docString: |
      Title: Container Runtime Requirements
      Requirement:
        - Runtime: containerd (CRI) version ≥ 1.5
        - Kubelet cgroup driver: systemd
        - CRI socket path: /run/containerd/containerd.sock
        - Security hardening:
          - Seccomp: enabled (default profiles permitted)
          - AppArmor: enabled where supported
    checks:
      - containerRuntime:
          outcomes:
            - pass:
                when: "== containerd"
                message: containerd runtime detected
            - fail:
                message: Unsupported container runtime; containerd required

  {{- if .storage.enabled }}
  - name: Storage
    docString: |
      Title: Default StorageClass Requirements
      Requirement:
        - A StorageClass named "{{ .storage.className | default "default" }}" must exist and be annotated as cluster default
        - AccessMode: ReadWriteOnce (RWO) required (RWX optional)
        - VolumeBindingMode: WaitForFirstConsumer preferred
        - allowVolumeExpansion: true recommended
        - Baseline performance per volume:
          - Minimum: {{ .storage.minIOPS | default "1000" }} write IOPS, {{ .storage.minReadIOPS | default "3000" }} read IOPS
          - Recommended: 3000+ write IOPS, 6000+ read IOPS, 250+ MB/s throughput
        - Encryption at rest: {{ if .storage.encryption }}enabled{{ else }}optional{{ end }}
    checks:
      - storageClass:
          checkName: Default StorageClass
          name: '{{ .storage.className | default "default" }}'
          required: true
  {{- end }}

  - name: Node Sizing (Cluster-Level)
    docString: |
      Title: Cluster Size and Aggregate Capacity
      Requirement:
        - Node count: Minimum {{ .cluster.minNodes | default "3" }} nodes (HA baseline), Recommended {{ .cluster.recommendedNodes | default "5" }} nodes
        - Total CPU: Minimum {{ .cluster.minCPU | default "4" }} vCPU, Recommended 8+ vCPU
        - Total Memory: Minimum {{ .cluster.minMemory | default "16" }} GiB, Recommended 32+ GiB
        - Control plane sizing:
          - Managed control planes supported (EKS/GKE/AKS)
          - Self-managed: 3 control-plane nodes recommended
    checks:
      - nodeResources:
          checkName: Cluster capacity
          outcomes:
            - fail:
                when: 'count() < {{ .cluster.minNodes | default "3" }}'
                message: Requires at least {{ .cluster.minNodes | default "3" }} nodes
            - warn:
                when: 'count() < {{ .cluster.recommendedNodes | default "5" }}'
                message: {{ .cluster.recommendedNodes | default "5" }} nodes recommended for headroom
            - pass:
                message: Node count is sufficient
      - nodeResources:
          checkName: Cluster CPU total
          outcomes:
            - fail:
                when: 'sum(cpuCapacity) < {{ .cluster.minCPU | default "4" }}'
                message: Requires at least {{ .cluster.minCPU | default "4" }} vCPU total
            - pass:
                message: CPU total is sufficient
      - nodeResources:
          checkName: Cluster memory total
          outcomes:
            - fail:
                when: 'sum(memoryCapacity) < {{ .cluster.minMemory | default "16" }}Gi'
                message: Requires at least {{ .cluster.minMemory | default "16" }} GiB total memory
            - pass:
                message: Memory total is sufficient

  {{- if .postgres.enabled }}
  - name: Postgres (Conditional)
    docString: |
      Title: Postgres Platform Requirements
      Requirement:
        - Database: PostgreSQL {{ .postgres.version | default "14+" }}
        - Connection: {{ .postgres.uri | default "postgresql://postgres@postgres:5432/postgres" }}
        - StorageClass: {{ .postgres.storageClass | default "default" }} with:
          - Latency p99 ≤ 5 ms
          - ≥ 3000 read IOPS, ≥ 1000 write IOPS
          - allowVolumeExpansion: true
        - Memory per node: Minimum {{ .postgres.minMemory | default "8" }} GiB; Recommended 32 GiB
        - CPU per node: Minimum {{ .postgres.minCPU | default "2" }} vCPU; Recommended 4+ vCPU
    checks:
      - storageClass:
          checkName: Postgres storage class
          name: '{{ .postgres.storageClass | default "default" }}'
          required: true
      - nodeResources:
          checkName: Postgres memory guidance
          outcomes:
            - fail:
                when: 'min(memoryCapacity) < {{ .postgres.minMemory | default "8" }}Gi'
                message: All nodes must have at least {{ .postgres.minMemory | default "8" }} GiB of memory for Postgres
            - warn:
                when: "min(memoryCapacity) < 32Gi"
                message: Nodes are recommended to have at least 32 GiB of memory for Postgres
            - pass:
                message: Nodes have sufficient memory for Postgres
  {{- end }}

  {{- if .redis.enabled }}
  - name: Redis (Conditional)
    docString: |
      Title: Redis Platform Requirements
      Requirement:
        - Database: Redis {{ .redis.version | default "6.2+" }}
        - Connection: {{ .redis.uri | default "redis://default:@redis:6379" }}
        - Ephemeral storage per node: Minimum 40 GiB; Recommended 100 GiB
        - If persistence enabled: SSD-backed StorageClass with low-latency reads/writes
        - Memory per node: Baseline {{ .redis.minMemory | default "4" }} GiB; Recommended sized to dataset with 30% headroom
    checks:
      - nodeResources:
          checkName: Redis ephemeral storage
          outcomes:
            - fail:
                when: "min(ephemeralStorageCapacity) < 40Gi"
                message: Each node must have at least 40 GiB ephemeral storage for Redis
            - warn:
                when: "min(ephemeralStorageCapacity) < 100Gi"
                message: 100 GiB per node recommended for Redis
            - pass:
                message: Nodes have sufficient ephemeral storage for Redis
  {{- end }}

  {{- if .ingress.enabled }}
  - name: Ingress and CRDs
    docString: |
      Title: Required CRDs and Ingress Capabilities
      Requirement:
        - Ingress Controller: {{ .ingress.type | default "Contour" }}
        {{- if eq (.ingress.type | default "Contour") "Contour" }}
        - CRD must be present:
          - Group: heptio.com
          - Kind: IngressRoute
          - Version: v1beta1 or later served version
        {{- end }}
        - Ingress capability:
          - Layer-7 HTTP/HTTPS routing with TLS termination supported
          - Wildcard certificates permitted (optional)
          {{- if .ingress.customDomain }}
          - Custom domain: {{ .ingress.customDomain }}
          {{- end }}
    checks:
      {{- if eq (.ingress.type | default "Contour") "Contour" }}
      - customResourceDefinition:
          checkName: Contour IngressRoute CRD
          customResourceDefinitionName: ingressroutes.contour.heptio.com
          outcomes:
            - fail:
                message: Contour IngressRoute CRD not found; required for ingress routing
            - pass:
                message: Contour IngressRoute CRD present
      {{- end }}
  {{- end }}

  {{- if .monitoring.enabled }}
  - name: Monitoring Stack
    docString: |
      Title: Monitoring and Observability Requirements
      Requirement:
        - Monitoring: {{ .monitoring.type | default "Prometheus" }}
        - Metrics retention: {{ .monitoring.retention | default "15 days" }}
        - Storage required: {{ .monitoring.storageSize | default "50Gi" }}
        - Components:
          {{- if .monitoring.prometheus }}
          - Prometheus for metrics collection
          {{- end }}
          {{- if .monitoring.grafana }}
          - Grafana for visualization
          {{- end }}
          {{- if .monitoring.alertmanager }}
          - AlertManager for alerting
          {{- end }}
    checks:
      - storageClass:
          checkName: Monitoring storage
          name: '{{ .monitoring.storageClass | default "default" }}'
          required: true
  {{- end }}

  - name: Operating System and Kernel
    docString: |
      Title: OS and Kernel Requirements
      Requirement:
        - Nodes: Linux x86_64 (amd64) or arm64 on supported distributions
        - Supported OS: {{ range .os.supported }}{{ . }}, {{ end }}
        - Kernel: ≥ {{ .os.minKernel | default "5.4" }} with cgroups v1 or v2 (v2 preferred)
        - Time sync: chrony or systemd-timesyncd active; clock drift < 500 ms
        - Filesystems: ext4 or xfs for container layers and volumes
        - SELinux/AppArmor: enforcing/permissive accepted